<!DOCTYPE html>
<html>
    <head>
        <title>PartyMode for YouTube</title>
        <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" crossorigin="anonymous">
        <link rel="stylesheet" type="text/css" href="player.css">
    </head>
     <body>
         <!-- Include an invisible curtain to prevent things interacting with the page-->
        <div id="invisible_curtain"></div>
        <div id="auth_info_panel">
            <div id="auth_header">Add a song to the queue:</div>
            <div id="host">{{hostUrl}}</div>
            <div id="pass_phrase">{{authString}}</div>
            <div id="current_queue">Currently queued: <span id="queue_size">{{queueSize}}</span></div>
        </div>
        {{{body}}}
        <script>
            var queueKey = new URL(window.location.href).searchParams.get('key');
            if(queueKey) {
                setInterval(() => {
                    var xhttp = new XMLHttpRequest();
                    xhttp.onreadystatechange = function () {
                        if (this.readyState == 4 && this.status == 200) {
                            var response = JSON.parse(this.responseText);
                            // If 'YT' exists, we're playing something. It will tell us to reload when it's finished so leave it to that.
                            // If it doesn't exist, and something is in the queue to play, reload to play it.
                            if (typeof(YT) === 'undefined' && response.queueLength !== 0) {
                                location.reload();
                            }
                            if (typeof(response.command) !== 'undefined' && typeof(player) !== 'undefined') {
                                switch (response.command) {
                                    case 'PLAY': player.playVideo();
                                        break;
                                    case 'PAUSE': player.pauseVideo();
                                        break;
                                    case 'NEXTTRACK': location.reload();
                                        break;
                                    case 'REPLAYTRACK': player.seekTo(0);
                                        break;
                                    default: console.log('unknown command: ' + response.command);
                                }
                            }
                            document.getElementById('queue_size').innerText = response.queueLength;
                        }
                    }

                    var statusString = '';
                    if (typeof(player) !== 'undefined') {
                        var playerState;
                        switch (player.getPlayerState()) {
                            case YT.PlayerState.UNSTARTED: playerState = 'UNSTARTED';
                                break;
                            case YT.PlayerState.ENDED: playerState = 'ENDED';
                                break;
                            case YT.PlayerState.PLAYING: playerState = 'PLAYING';
                                break;
                            case YT.PlayerState.PAUSED: playerState = 'PAUSED';
                                break;
                            case YT.PlayerState.BUFFERING: playerState = 'BUFFERING';
                                break;
                            case YT.PlayerState.CUED: playerState = 'CUED';
                                break;
                            default: playerState = 'UNKNOWN';
                        }
                        var videoId = player.getVideoData().video_id;
                        var videoPosition = player.getCurrentTime();
                        var videoDuration = player.getDuration();
                        statusString = [playerState, videoId, videoPosition, videoDuration].join(';');
                    }

                    var encodedStatusString = btoa(statusString);

                    xhttp.open('GET', '/api/player/poll' + (encodedStatusString !== '' ? '?status=' + encodedStatusString + '&' : '?') + 'key=' + queueKey, true);
                    xhttp.send();
                }, 1000);
            }
        </script>
     </body>
</html>